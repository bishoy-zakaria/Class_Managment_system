;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;void Sytem_Init(void);
;void Real_Time_Clock(void);
;void Air_Cond(int Temp);
;void Lighting_Control(void);
;unsigned int ADC_Read(unsigned char ch);
;int Sensor_Val();
;void main(void)
; 0000 0016 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0017 Sytem_Init();
;PCODE: $0000000E VOL: 0
; 0000 0018 
; 0000 0019 while (1)
;PCODE: $0000000F VOL: 0
; 0000 001A {
; 0000 001B lcd_clear(); //clear LCD in each cycle
;PCODE: $00000010 VOL: 0
; 0000 001C Air_Cond(T);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 001D Real_Time_Clock();
;PCODE: $00000014 VOL: 0
; 0000 001E Lighting_Control();
;PCODE: $00000015 VOL: 0
; 0000 001F delay_ms(500); //delay for displaying data in LCD
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0020 }
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0021 }
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;void Sytem_Init(void)
; 0000 0026 {
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0027 /******************** DIO initialization *********************/
; 0000 0028 CLR_BIT(DDRB, 2);      // IR EXIT SENSOR SET AS INPUT
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0029 CLR_BIT(DDRD, 3);     // IR ENTRY SENSOR SET AS INPUT
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 002A SET_BIT(PORTB, 2);    // PULL UP RESISTANCE IS CONNECTED TO PIN B2
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 002B SET_BIT(PORTD, 3);    // PULL UP RESISTANCE IS CONNECTED TO PIN D3
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 002C SET_BIT(DDRB, 0); // first lighting
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 002D SET_BIT(DDRB, 1); // second lighting
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 002E SET_BIT(DDRB, 3); // third lighting
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 002F 
; 0000 0030 SET_BIT(DDRD,4); //ALARM RED LED
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0031 
; 0000 0032 SET_BIT(DDRB, 4); //set pins 4,5,6 and 7 for primary heater,suporter heater,primary cooler and suporter cooler
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0033 SET_BIT(DDRB, 5);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0034 SET_BIT(DDRB, 6);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0035 SET_BIT(DDRB, 7);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0036 
; 0000 0037 lcd_init(16); // lcd initializing pins
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0038 
; 0000 0039 /************* timer2 initialization ********************/ //connecting crystal oscillator with value 32.768 khz to TOSC1 $ TOSC2
; 0000 003A TCCR2 = 0b00000101; // normal mode $ prescaler 128
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 003B SET_BIT(ASSR, 3); //(AS2 Bit in ASSR register) this enables to use timer2 as real timer counter(RTC)
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 003C SET_BIT(TIMSK, 6); // enable overflow interrupt
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 003D 
; 0000 003E /************* External interrupt 1&2 initialization **************/
; 0000 003F SET_BIT(SREG, 7);     // SET GLOBAL INTERRUPT ENABLE
;PCODE: $00000041 VOL: 0
; 0000 0040 SET_BIT(GICR, 5);     // SET INTERRUPT TWO
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0041 SET_BIT(GICR, 7);     // SET INTERRUPT ONE
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0042 CLR_BIT(MCUCR, 2);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0043 SET_BIT(MCUCR, 3);    // INTERRUPT ONE WORK IN FALLING EDGE
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0044 SET_BIT(MCUCSR, 6);  // INTERRUPT TWO WORK IN RISING EDGE
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0045 
; 0000 0046 /********************* ADC initialization **********************/
; 0000 0047 ADMUX = 0b00100000;  //AREF Reference voltage, left adjust the result to read only 8 bit
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0048 ADCSRA = 0b10000011; //enable ADC, Set ADC prescaler equal to 8
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0049 }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;void Real_Time_Clock(void)
; 0000 004C {
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 004D if (hours < 12)//AM time
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 004E {
; 0000 004F lcd_gotoxy(3, 0);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0050 lcd_printf("%02d:%02d:%02d AM", hours, mins, secs);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0051 }
; 0000 0052 else if (hours > 12)//PM time
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0053 {
; 0000 0054 mid = hours - 12;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0055 lcd_gotoxy(3, 0);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0056 lcd_printf("%02d:%02d:%02d PM", mid, mins, secs);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0057 }
; 0000 0058 }
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;void Air_Cond(int Temp)
; 0000 005C {
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 005D if (Temp <= 10)
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;	Temp -> R16,R17
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 005E {
; 0000 005F CLR_BIT(PORTB,4);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0060 CLR_BIT(PORTB,5);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0061 SET_BIT(PORTB,6);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0062 SET_BIT(PORTB,7);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0063 }
; 0000 0064 else if ((Temp > 10) && (Temp <= 20))
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0065 {
; 0000 0066 CLR_BIT(PORTB,4);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0067 CLR_BIT(PORTB,5);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0068 SET_BIT(PORTB,6);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0069 CLR_BIT(PORTB,7);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 006A }
; 0000 006B 
; 0000 006C else if ((Temp > 20) && (Temp <= 30))
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 006D {
; 0000 006E CLR_BIT(PORTB,4);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 006F CLR_BIT(PORTB,5);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0070 CLR_BIT(PORTB,6);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0071 CLR_BIT(PORTB,7);
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0072 }
; 0000 0073 
; 0000 0074 else if ((Temp > 30) && (Temp <= 40))
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0075 {
; 0000 0076 SET_BIT(PORTB,4);
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0077 CLR_BIT(PORTB,5);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0078 CLR_BIT(PORTB,6);
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0079 CLR_BIT(PORTB,7);
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 007A }
; 0000 007B 
; 0000 007C else if ((Temp > 40) && (Temp <= 50))
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 007D {
; 0000 007E SET_BIT(PORTB,4);
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 007F SET_BIT(PORTB,5);
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0080 CLR_BIT(PORTB,6);
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0081 CLR_BIT(PORTB,7);
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0082 }
; 0000 0083 lcd_gotoxy(0, 1);
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0084 lcd_printf("TEMP:%uC", Temp,);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0085 
; 0000 0086 }
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;void Lighting_Control(void)
; 0000 0089 {
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 008A if (count == 0)
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 008B {
; 0000 008C CLR_BIT(PORTB, 0);
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 008D CLR_BIT(PORTB, 1);
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 008E CLR_BIT(PORTB, 3);
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 008F lcd_gotoxy(10, 1);
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 0090 lcd_printf("NUM:%u", count);
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 0091 }
; 0000 0092 
; 0000 0093 else if (count <= 20)
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0094 {
; 0000 0095 lcd_gotoxy(10, 1);
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0096 lcd_printf("NUM:%u", count);
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0097 
; 0000 0098 if (count <= 10)
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 0099 {
; 0000 009A SET_BIT(PORTB,0);
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 009B CLR_BIT(PORTB,1);
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 009C CLR_BIT(PORTB,3);
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 009D }
; 0000 009E else if ((count > 10) && (count <= 20))
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 009F {
; 0000 00A0 SET_BIT(PORTB,0);
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00A1 SET_BIT(PORTB,1);
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00A2 CLR_BIT(PORTB,3);
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 00A3 }
; 0000 00A4 }
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00A5 else if (count > 20)
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00A6 {
; 0000 00A7 SET_BIT(PORTB,3);
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00A8 if (count < 25)
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00A9 {
; 0000 00AA lcd_gotoxy(10, 1);
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00AB lcd_printf("NUM:%u", count);
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 00AC CLR_BIT(PORTD,4);
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 00AD }
; 0000 00AE else if(count >= 25)
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 00AF {
; 0000 00B0 lcd_gotoxy(10, 1);
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00B1 lcd_printf("FULL");
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 00B2 SET_BIT(PORTD,4);
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 00B3 }
; 0000 00B4 }
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 00B5 }
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;unsigned int ADC_Read(unsigned char ch)
; 0000 00B8 {
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 00B9 ADMUX  = (ADMUX & 0b11100000) | ch;  //Select channel -> First: clear the previously set channel, then set the new channel
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;	ch -> R17
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 00BA ADCSRA.6 = 1;         //Start conversion
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 00BB while(ADCSRA.6 == 1); // Wait till the conversion ends
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 00BC return ADCH;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 00BD 
; 0000 00BE }
;PCODE: $00000195 VOL: 0
;int Sensor_Val()
; 0000 00C1 {
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 00C2 int temp = 0;
; 0000 00C3 temp = (ADC_Read(ADC_Channel) * 50) / 255; // temp ranges from 0 to 50 ^c
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;	temp -> R16,R17
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 00C4 return temp;
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 00C5 }
;PCODE: $000001A7 VOL: 0
;interrupt[3] void ext_int1(void)
; 0000 00CA {
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 00CB count++;
;PCODE: $000001AA VOL: 0
; 0000 00CC }
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;interrupt[19] void ext_int2(void)
; 0000 00CF {
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 00D0 if(count != 0)//for not get negative value
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 00D1 count--;
;PCODE: $000001B2 VOL: 0
; 0000 00D2 }
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;interrupt [5] void T2_OV (void)
; 0000 00D5 {
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 00D6 
; 0000 00D7 if ((secs % 5) == 0 ) // every 5 sec check the temperature value
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 00D8 T = Sensor_Val();
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 00D9 
; 0000 00DA secs++;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 00DB 
; 0000 00DC if (secs == 60)
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 00DD {
; 0000 00DE secs = 0;
;PCODE: $000001C6 VOL: 0
; 0000 00DF mins++;
;PCODE: $000001C7 VOL: 0
; 0000 00E0 }
; 0000 00E1 if (mins == 60)
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 00E2 {
; 0000 00E3 mins = 0;
;PCODE: $000001CC VOL: 0
; 0000 00E4 hours++;
;PCODE: $000001CD VOL: 0
; 0000 00E5 
; 0000 00E6 }
; 0000 00E7 
; 0000 00E8 }
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
