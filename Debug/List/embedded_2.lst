
AVRASM ver. 2.1.30  C:\Users\lenovo\OneDrive\Desktop\embadded_2\Debug\List\embedded_2.asm Thu Dec 30 23:10:26 2021

C:\Users\lenovo\OneDrive\Desktop\embadded_2\Debug\List\embedded_2.asm(1414): warning: Register r5 already defined by the .DEF directive
C:\Users\lenovo\OneDrive\Desktop\embadded_2\Debug\List\embedded_2.asm(1415): warning: Register r4 already defined by the .DEF directive
C:\Users\lenovo\OneDrive\Desktop\embadded_2\Debug\List\embedded_2.asm(1416): warning: Register r7 already defined by the .DEF directive
C:\Users\lenovo\OneDrive\Desktop\embadded_2\Debug\List\embedded_2.asm(1417): warning: Register r6 already defined by the .DEF directive
C:\Users\lenovo\OneDrive\Desktop\embadded_2\Debug\List\embedded_2.asm(1418): warning: Register r9 already defined by the .DEF directive
C:\Users\lenovo\OneDrive\Desktop\embadded_2\Debug\List\embedded_2.asm(1419): warning: Register r8 already defined by the .DEF directive
C:\Users\lenovo\OneDrive\Desktop\embadded_2\Debug\List\embedded_2.asm(1420): warning: Register r11 already defined by the .DEF directive
C:\Users\lenovo\OneDrive\Desktop\embadded_2\Debug\List\embedded_2.asm(1421): warning: Register r10 already defined by the .DEF directive
C:\Users\lenovo\OneDrive\Desktop\embadded_2\Debug\List\embedded_2.asm(1422): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.47 
                 ;(C) Copyright 1998-2021 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _secs=R5
                 	.DEF _mins=R4
                 	.DEF _hours=R7
                 	.DEF _mid=R6
                 	.DEF _count=R9
                 	.DEF _T=R8
                 	.DEF __lcd_x=R11
                 	.DEF __lcd_y=R10
                 	.DEF __lcd_maxx=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 018d 	JMP  _ext_int1
000006 940c 0000 	JMP  0x00
000008 940c 0199 	JMP  _T2_OV
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0191 	JMP  _ext_int2
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0800      	.DB  0x0,0x0,0x0,0x8
000035 0064      	.DB  0x64,0x0
                 
                 _0x0:
000036 3025
000037 6432
000038 253a
000039 3230      	.DB  0x25,0x30,0x32,0x64,0x3A,0x25,0x30,0x32
00003a 3a64
00003b 3025
00003c 6432
00003d 4120      	.DB  0x64,0x3A,0x25,0x30,0x32,0x64,0x20,0x41
00003e 004d
00003f 3025
000040 6432
000041 253a      	.DB  0x4D,0x0,0x25,0x30,0x32,0x64,0x3A,0x25
000042 3230
000043 3a64
000044 3025
000045 6432      	.DB  0x30,0x32,0x64,0x3A,0x25,0x30,0x32,0x64
000046 5020
000047 004d
000048 4554
000049 504d      	.DB  0x20,0x50,0x4D,0x0,0x54,0x45,0x4D,0x50
00004a 253a
00004b 4375
00004c 4e00
00004d 4d55      	.DB  0x3A,0x25,0x75,0x43,0x0,0x4E,0x55,0x4D
00004e 253a
00004f 0075
000050 5546
000051 4c4c      	.DB  0x3A,0x25,0x75,0x0,0x46,0x55,0x4C,0x4C
C:\Users\lenovo\OneDrive\Desktop\embadded_2\Debug\List\embedded_2.asm(1472): warning: .cseg .db misalignment - padding zero byte
000052 0000      	.DB  0x0
                 _0x2000003:
000053 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000054 0006      	.DW  0x06
000055 0004      	.DW  0x04
000056 0066      	.DW  __REG_VARS*2
                 
000057 0002      	.DW  0x02
000058 0160      	.DW  __base_y_G100
000059 00a6      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00005a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005b 94f8      	CLI
00005c 27ee      	CLR  R30
00005d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005e e0f1      	LDI  R31,1
00005f bffb      	OUT  GICR,R31
000060 bfeb      	OUT  GICR,R30
000061 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000062 e08d      	LDI  R24,(14-2)+1
000063 e0a2      	LDI  R26,2
000064 27bb      	CLR  R27
                 __CLEAR_REG:
000065 93ed      	ST   X+,R30
000066 958a      	DEC  R24
000067 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000068 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000069 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00006b 93ed      	ST   X+,R30
00006c 9701      	SBIW R24,1
00006d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006e eae8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000070 9185      	LPM  R24,Z+
000071 9195      	LPM  R25,Z+
000072 9700      	SBIW R24,0
000073 f061      	BREQ __GLOBAL_INI_END
000074 91a5      	LPM  R26,Z+
000075 91b5      	LPM  R27,Z+
000076 9005      	LPM  R0,Z+
000077 9015      	LPM  R1,Z+
000078 01bf      	MOVW R22,R30
000079 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007a 9005      	LPM  R0,Z+
00007b 920d      	ST   X+,R0
00007c 9701      	SBIW R24,1
00007d f7e1      	BRNE __GLOBAL_INI_LOOP
00007e 01fb      	MOVW R30,R22
00007f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000080 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000081 bfed      	OUT  SPL,R30
000082 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000083 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000084 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000085 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000086 940c 0088 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;void Sytem_Init(void);
                 ;void Real_Time_Clock(void);
                 ;void Air_Cond(int Temp);
                 ;void Lighting_Control(void);
                 ;unsigned int ADC_Read(unsigned char ch);
                 ;int Sensor_Val();
                 ;void main(void)
                 ; 0000 0016 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0017 Sytem_Init();
000088 d00b      	RCALL _Sytem_Init
                 ; 0000 0018 
                 ; 0000 0019 while (1)
                 _0x3:
                 ; 0000 001A {
                 ; 0000 001B lcd_clear(); //clear LCD in each cycle
000089 d17f      	RCALL _lcd_clear
                 ; 0000 001C Air_Cond(T);
00008a 2da8      	MOV  R26,R8
00008b 27bb      	CLR  R27
00008c d054      	RCALL _Air_Cond
                 ; 0000 001D Real_Time_Clock();
00008d d031      	RCALL _Real_Time_Clock
                 ; 0000 001E Lighting_Control();
00008e d0a2      	RCALL _Lighting_Control
                 ; 0000 001F delay_ms(500); //delay for displaying data in LCD
00008f efa4      	LDI  R26,LOW(500)
000090 e0b1      	LDI  R27,HIGH(500)
000091 d3b5      	RCALL _delay_ms
                 ; 0000 0020 }
000092 cff6      	RJMP _0x3
                 ; 0000 0021 }
                 _0x6:
000093 cfff      	RJMP _0x6
                 ; .FEND
                 ;void Sytem_Init(void)
                 ; 0000 0026 {
                 _Sytem_Init:
                 ; .FSTART _Sytem_Init
                 ; 0000 0027 /******************** DIO initialization *********************/
                 ; 0000 0028 CLR_BIT(DDRB, 2);      // IR EXIT SENSOR SET AS INPUT
000094 98ba      	CBI  0x17,2
                 ; 0000 0029 CLR_BIT(DDRD, 3);     // IR ENTRY SENSOR SET AS INPUT
000095 988b      	CBI  0x11,3
                 ; 0000 002A SET_BIT(PORTB, 2);    // PULL UP RESISTANCE IS CONNECTED TO PIN B2
000096 9ac2      	SBI  0x18,2
                 ; 0000 002B SET_BIT(PORTD, 3);    // PULL UP RESISTANCE IS CONNECTED TO PIN D3
000097 9a93      	SBI  0x12,3
                 ; 0000 002C SET_BIT(DDRB, 0); // first lighting
000098 9ab8      	SBI  0x17,0
                 ; 0000 002D SET_BIT(DDRB, 1); // second lighting
000099 9ab9      	SBI  0x17,1
                 ; 0000 002E SET_BIT(DDRB, 3); // third lighting
00009a 9abb      	SBI  0x17,3
                 ; 0000 002F 
                 ; 0000 0030 SET_BIT(DDRD,4); //ALARM RED LED
00009b 9a8c      	SBI  0x11,4
                 ; 0000 0031 
                 ; 0000 0032 SET_BIT(DDRB, 4); //set pins 4,5,6 and 7 for primary heater,suporter heater,primary cooler and suporter cooler
00009c 9abc      	SBI  0x17,4
                 ; 0000 0033 SET_BIT(DDRB, 5);
00009d 9abd      	SBI  0x17,5
                 ; 0000 0034 SET_BIT(DDRB, 6);
00009e 9abe      	SBI  0x17,6
                 ; 0000 0035 SET_BIT(DDRB, 7);
00009f 9abf      	SBI  0x17,7
                 ; 0000 0036 
                 ; 0000 0037 lcd_init(16); // lcd initializing pins
0000a0 e1a0      	LDI  R26,LOW(16)
0000a1 d184      	RCALL _lcd_init
                 ; 0000 0038 
                 ; 0000 0039 /************* timer2 initialization ********************/ //connecting crystal oscillator with value 32.768 khz to TOSC1 $ TOSC2
                 ; 0000 003A TCCR2 = 0b00000101; // normal mode $ prescaler 128
0000a2 e0e5      	LDI  R30,LOW(5)
0000a3 bde5      	OUT  0x25,R30
                 ; 0000 003B SET_BIT(ASSR, 3); //(AS2 Bit in ASSR register) this enables to use timer2 as real timer counter(RTC)
0000a4 b5e2      	IN   R30,0x22
0000a5 60e8      	ORI  R30,8
0000a6 bde2      	OUT  0x22,R30
                 ; 0000 003C SET_BIT(TIMSK, 6); // enable overflow interrupt
0000a7 b7e9      	IN   R30,0x39
0000a8 64e0      	ORI  R30,0x40
0000a9 bfe9      	OUT  0x39,R30
                 ; 0000 003D 
                 ; 0000 003E /************* External interrupt 1&2 initialization **************/
                 ; 0000 003F SET_BIT(SREG, 7);     // SET GLOBAL INTERRUPT ENABLE
0000aa 9478      	BSET 7
                 ; 0000 0040 SET_BIT(GICR, 5);     // SET INTERRUPT TWO
0000ab b7eb      	IN   R30,0x3B
0000ac 62e0      	ORI  R30,0x20
0000ad bfeb      	OUT  0x3B,R30
                 ; 0000 0041 SET_BIT(GICR, 7);     // SET INTERRUPT ONE
0000ae b7eb      	IN   R30,0x3B
0000af 68e0      	ORI  R30,0x80
0000b0 bfeb      	OUT  0x3B,R30
                 ; 0000 0042 CLR_BIT(MCUCR, 2);
0000b1 b7e5      	IN   R30,0x35
0000b2 7feb      	ANDI R30,0xFB
0000b3 bfe5      	OUT  0x35,R30
                 ; 0000 0043 SET_BIT(MCUCR, 3);    // INTERRUPT ONE WORK IN FALLING EDGE
0000b4 b7e5      	IN   R30,0x35
0000b5 60e8      	ORI  R30,8
0000b6 bfe5      	OUT  0x35,R30
                 ; 0000 0044 SET_BIT(MCUCSR, 6);  // INTERRUPT TWO WORK IN RISING EDGE
0000b7 b7e4      	IN   R30,0x34
0000b8 64e0      	ORI  R30,0x40
0000b9 bfe4      	OUT  0x34,R30
                 ; 0000 0045 
                 ; 0000 0046 /********************* ADC initialization **********************/
                 ; 0000 0047 ADMUX = 0b00100000;  //AREF Reference voltage, left adjust the result to read only 8 bit
0000ba e2e0      	LDI  R30,LOW(32)
0000bb b9e7      	OUT  0x7,R30
                 ; 0000 0048 ADCSRA = 0b10000011; //enable ADC, Set ADC prescaler equal to 8
0000bc e8e3      	LDI  R30,LOW(131)
0000bd b9e6      	OUT  0x6,R30
                 ; 0000 0049 }
0000be 9508      	RET
                 ; .FEND
                 ;void Real_Time_Clock(void)
                 ; 0000 004C {
                 _Real_Time_Clock:
                 ; .FSTART _Real_Time_Clock
                 ; 0000 004D if (hours < 12)//AM time
0000bf e0ec      	LDI  R30,LOW(12)
0000c0 167e      	CP   R7,R30
0000c1 f438      	BRSH _0x7
                 ; 0000 004E {
                 ; 0000 004F lcd_gotoxy(3, 0);
0000c2 d305      	RCALL SUBOPT_0x0
                 ; 0000 0050 lcd_printf("%02d:%02d:%02d AM", hours, mins, secs);
                +
0000c3 e6ec     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000c4 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000c5 93fa      	ST   -Y,R31
0000c6 93ea      	ST   -Y,R30
0000c7 2de7      	MOV  R30,R7
0000c8 c00c      	RJMP _0x31
                 ; 0000 0051 }
                 ; 0000 0052 else if (hours > 12)//PM time
                 _0x7:
0000c9 e0ec      	LDI  R30,LOW(12)
0000ca 15e7      	CP   R30,R7
0000cb f4a0      	BRSH _0x9
                 ; 0000 0053 {
                 ; 0000 0054 mid = hours - 12;
0000cc 2de7      	MOV  R30,R7
0000cd 50ec      	SUBI R30,LOW(12)
0000ce 2e6e      	MOV  R6,R30
                 ; 0000 0055 lcd_gotoxy(3, 0);
0000cf d2f8      	RCALL SUBOPT_0x0
                 ; 0000 0056 lcd_printf("%02d:%02d:%02d PM", mid, mins, secs);
                +
0000d0 e7ee     +LDI R30 , LOW ( 2 * _0x0 + ( 18 ) )
0000d1 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 18 ) )
                 	__POINTW1FN _0x0,18
0000d2 93fa      	ST   -Y,R31
0000d3 93ea      	ST   -Y,R30
0000d4 2de6      	MOV  R30,R6
                 _0x31:
0000d5 27ff      	CLR  R31
0000d6 2766      	CLR  R22
0000d7 2777      	CLR  R23
0000d8 d369      	RCALL __PUTPARD1
0000d9 2de4      	MOV  R30,R4
0000da d2f1      	RCALL SUBOPT_0x1
0000db 2de5      	MOV  R30,R5
0000dc d2ef      	RCALL SUBOPT_0x1
0000dd e08c      	LDI  R24,12
0000de d2a9      	RCALL _lcd_printf
0000df 962e      	ADIW R28,14
                 ; 0000 0057 }
                 ; 0000 0058 }
                 _0x9:
0000e0 9508      	RET
                 ; .FEND
                 ;void Air_Cond(int Temp)
                 ; 0000 005C {
                 _Air_Cond:
                 ; .FSTART _Air_Cond
                 ; 0000 005D if (Temp <= 10)
0000e1 931a      	ST   -Y,R17
0000e2 930a      	ST   -Y,R16
0000e3 018d      	MOVW R16,R26
                 ;	Temp -> R16,R17
                +
0000e4 300b     +CPI R16 , LOW ( 11 )
0000e5 e0e0     +LDI R30 , HIGH ( 11 )
0000e6 071e     +CPC R17 , R30
                 	__CPWRN 16,17,11
0000e7 f42c      	BRGE _0xA
                 ; 0000 005E {
                 ; 0000 005F CLR_BIT(PORTB,4);
0000e8 98c4      	CBI  0x18,4
                 ; 0000 0060 CLR_BIT(PORTB,5);
0000e9 98c5      	CBI  0x18,5
                 ; 0000 0061 SET_BIT(PORTB,6);
0000ea 9ac6      	SBI  0x18,6
                 ; 0000 0062 SET_BIT(PORTB,7);
0000eb 9ac7      	SBI  0x18,7
                 ; 0000 0063 }
                 ; 0000 0064 else if ((Temp > 10) && (Temp <= 20))
0000ec c032      	RJMP _0xB
                 _0xA:
                +
0000ed 300b     +CPI R16 , LOW ( 11 )
0000ee e0e0     +LDI R30 , HIGH ( 11 )
0000ef 071e     +CPC R17 , R30
                 	__CPWRN 16,17,11
0000f0 f024      	BRLT _0xD
                +
0000f1 3105     +CPI R16 , LOW ( 21 )
0000f2 e0e0     +LDI R30 , HIGH ( 21 )
0000f3 071e     +CPC R17 , R30
                 	__CPWRN 16,17,21
0000f4 f00c      	BRLT _0xE
                 _0xD:
0000f5 c004      	RJMP _0xC
                 _0xE:
                 ; 0000 0065 {
                 ; 0000 0066 CLR_BIT(PORTB,4);
0000f6 98c4      	CBI  0x18,4
                 ; 0000 0067 CLR_BIT(PORTB,5);
0000f7 98c5      	CBI  0x18,5
                 ; 0000 0068 SET_BIT(PORTB,6);
0000f8 9ac6      	SBI  0x18,6
                 ; 0000 0069 CLR_BIT(PORTB,7);
0000f9 c024      	RJMP _0x32
                 ; 0000 006A }
                 ; 0000 006B 
                 ; 0000 006C else if ((Temp > 20) && (Temp <= 30))
                 _0xC:
                +
0000fa 3105     +CPI R16 , LOW ( 21 )
0000fb e0e0     +LDI R30 , HIGH ( 21 )
0000fc 071e     +CPC R17 , R30
                 	__CPWRN 16,17,21
0000fd f024      	BRLT _0x11
                +
0000fe 310f     +CPI R16 , LOW ( 31 )
0000ff e0e0     +LDI R30 , HIGH ( 31 )
000100 071e     +CPC R17 , R30
                 	__CPWRN 16,17,31
000101 f00c      	BRLT _0x12
                 _0x11:
000102 c003      	RJMP _0x10
                 _0x12:
                 ; 0000 006D {
                 ; 0000 006E CLR_BIT(PORTB,4);
000103 98c4      	CBI  0x18,4
                 ; 0000 006F CLR_BIT(PORTB,5);
000104 98c5      	CBI  0x18,5
                 ; 0000 0070 CLR_BIT(PORTB,6);
000105 c017      	RJMP _0x33
                 ; 0000 0071 CLR_BIT(PORTB,7);
                 ; 0000 0072 }
                 ; 0000 0073 
                 ; 0000 0074 else if ((Temp > 30) && (Temp <= 40))
                 _0x10:
                +
000106 310f     +CPI R16 , LOW ( 31 )
000107 e0e0     +LDI R30 , HIGH ( 31 )
000108 071e     +CPC R17 , R30
                 	__CPWRN 16,17,31
000109 f024      	BRLT _0x15
                +
00010a 3209     +CPI R16 , LOW ( 41 )
00010b e0e0     +LDI R30 , HIGH ( 41 )
00010c 071e     +CPC R17 , R30
                 	__CPWRN 16,17,41
00010d f00c      	BRLT _0x16
                 _0x15:
00010e c003      	RJMP _0x14
                 _0x16:
                 ; 0000 0075 {
                 ; 0000 0076 SET_BIT(PORTB,4);
00010f 9ac4      	SBI  0x18,4
                 ; 0000 0077 CLR_BIT(PORTB,5);
000110 98c5      	CBI  0x18,5
                 ; 0000 0078 CLR_BIT(PORTB,6);
000111 c00b      	RJMP _0x33
                 ; 0000 0079 CLR_BIT(PORTB,7);
                 ; 0000 007A }
                 ; 0000 007B 
                 ; 0000 007C else if ((Temp > 40) && (Temp <= 50))
                 _0x14:
                +
000112 3209     +CPI R16 , LOW ( 41 )
000113 e0e0     +LDI R30 , HIGH ( 41 )
000114 071e     +CPC R17 , R30
                 	__CPWRN 16,17,41
000115 f024      	BRLT _0x19
                +
000116 3303     +CPI R16 , LOW ( 51 )
000117 e0e0     +LDI R30 , HIGH ( 51 )
000118 071e     +CPC R17 , R30
                 	__CPWRN 16,17,51
000119 f00c      	BRLT _0x1A
                 _0x19:
00011a c004      	RJMP _0x18
                 _0x1A:
                 ; 0000 007D {
                 ; 0000 007E SET_BIT(PORTB,4);
00011b 9ac4      	SBI  0x18,4
                 ; 0000 007F SET_BIT(PORTB,5);
00011c 9ac5      	SBI  0x18,5
                 ; 0000 0080 CLR_BIT(PORTB,6);
                 _0x33:
00011d 98c6      	CBI  0x18,6
                 ; 0000 0081 CLR_BIT(PORTB,7);
                 _0x32:
00011e 98c7      	CBI  0x18,7
                 ; 0000 0082 }
                 ; 0000 0083 lcd_gotoxy(0, 1);
                 _0x18:
                 _0xB:
00011f e0e0      	LDI  R30,LOW(0)
000120 93ea      	ST   -Y,R30
000121 e0a1      	LDI  R26,LOW(1)
000122 d0d4      	RCALL _lcd_gotoxy
                 ; 0000 0084 lcd_printf("TEMP:%uC", Temp,);
                +
000123 e9e0     +LDI R30 , LOW ( 2 * _0x0 + ( 36 ) )
000124 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 36 ) )
                 	__POINTW1FN _0x0,36
000125 93fa      	ST   -Y,R31
000126 93ea      	ST   -Y,R30
000127 01f8      	MOVW R30,R16
                +
000128 2f6f     +MOV R22 , R31
000129 0f66     +ADD R22 , R22
00012a 0b66     +SBC R22 , R22
00012b 2f76     +MOV R23 , R22
                 	__CWD1
00012c d315      	RCALL __PUTPARD1
00012d e084      	LDI  R24,4
00012e d259      	RCALL _lcd_printf
00012f 9626      	ADIW R28,6
                 ; 0000 0085 
                 ; 0000 0086 }
000130 c059      	RJMP _0x2080002
                 ; .FEND
                 ;void Lighting_Control(void)
                 ; 0000 0089 {
                 _Lighting_Control:
                 ; .FSTART _Lighting_Control
                 ; 0000 008A if (count == 0)
000131 2099      	TST  R9
000132 f441      	BRNE _0x1B
                 ; 0000 008B {
                 ; 0000 008C CLR_BIT(PORTB, 0);
000133 98c0      	CBI  0x18,0
                 ; 0000 008D CLR_BIT(PORTB, 1);
000134 98c1      	CBI  0x18,1
                 ; 0000 008E CLR_BIT(PORTB, 3);
000135 98c3      	CBI  0x18,3
                 ; 0000 008F lcd_gotoxy(10, 1);
000136 d29a      	RCALL SUBOPT_0x2
                 ; 0000 0090 lcd_printf("NUM:%u", count);
000137 e084      	LDI  R24,4
000138 d24f      	RCALL _lcd_printf
000139 9626      	ADIW R28,6
                 ; 0000 0091 }
                 ; 0000 0092 
                 ; 0000 0093 else if (count <= 20)
00013a c034      	RJMP _0x1C
                 _0x1B:
00013b e1e4      	LDI  R30,LOW(20)
00013c 15e9      	CP   R30,R9
00013d f0a8      	BRLO _0x1D
                 ; 0000 0094 {
                 ; 0000 0095 lcd_gotoxy(10, 1);
00013e d292      	RCALL SUBOPT_0x2
                 ; 0000 0096 lcd_printf("NUM:%u", count);
00013f e084      	LDI  R24,4
000140 d247      	RCALL _lcd_printf
000141 9626      	ADIW R28,6
                 ; 0000 0097 
                 ; 0000 0098 if (count <= 10)
000142 e0ea      	LDI  R30,LOW(10)
000143 15e9      	CP   R30,R9
000144 f018      	BRLO _0x1E
                 ; 0000 0099 {
                 ; 0000 009A SET_BIT(PORTB,0);
000145 9ac0      	SBI  0x18,0
                 ; 0000 009B CLR_BIT(PORTB,1);
000146 98c1      	CBI  0x18,1
                 ; 0000 009C CLR_BIT(PORTB,3);
000147 c009      	RJMP _0x34
                 ; 0000 009D }
                 ; 0000 009E else if ((count > 10) && (count <= 20))
                 _0x1E:
000148 e0ea      	LDI  R30,LOW(10)
000149 15e9      	CP   R30,R9
00014a f418      	BRSH _0x21
00014b e1e4      	LDI  R30,LOW(20)
00014c 15e9      	CP   R30,R9
00014d f408      	BRSH _0x22
                 _0x21:
00014e c003      	RJMP _0x20
                 _0x22:
                 ; 0000 009F {
                 ; 0000 00A0 SET_BIT(PORTB,0);
00014f 9ac0      	SBI  0x18,0
                 ; 0000 00A1 SET_BIT(PORTB,1);
000150 9ac1      	SBI  0x18,1
                 ; 0000 00A2 CLR_BIT(PORTB,3);
                 _0x34:
000151 98c3      	CBI  0x18,3
                 ; 0000 00A3 }
                 ; 0000 00A4 }
                 _0x20:
                 ; 0000 00A5 else if (count > 20)
000152 c01c      	RJMP _0x23
                 _0x1D:
000153 e1e4      	LDI  R30,LOW(20)
000154 15e9      	CP   R30,R9
000155 f4c8      	BRSH _0x24
                 ; 0000 00A6 {
                 ; 0000 00A7 SET_BIT(PORTB,3);
000156 9ac3      	SBI  0x18,3
                 ; 0000 00A8 if (count < 25)
000157 e1e9      	LDI  R30,LOW(25)
000158 169e      	CP   R9,R30
000159 f430      	BRSH _0x25
                 ; 0000 00A9 {
                 ; 0000 00AA lcd_gotoxy(10, 1);
00015a d276      	RCALL SUBOPT_0x2
                 ; 0000 00AB lcd_printf("NUM:%u", count);
00015b e084      	LDI  R24,4
00015c d22b      	RCALL _lcd_printf
00015d 9626      	ADIW R28,6
                 ; 0000 00AC CLR_BIT(PORTD,4);
00015e 9894      	CBI  0x12,4
                 ; 0000 00AD }
                 ; 0000 00AE else if(count >= 25)
00015f c00f      	RJMP _0x26
                 _0x25:
000160 e1e9      	LDI  R30,LOW(25)
000161 169e      	CP   R9,R30
000162 f060      	BRLO _0x27
                 ; 0000 00AF {
                 ; 0000 00B0 lcd_gotoxy(10, 1);
000163 e0ea      	LDI  R30,LOW(10)
000164 93ea      	ST   -Y,R30
000165 e0a1      	LDI  R26,LOW(1)
000166 d090      	RCALL _lcd_gotoxy
                 ; 0000 00B1 lcd_printf("FULL");
                +
000167 eae0     +LDI R30 , LOW ( 2 * _0x0 + ( 52 ) )
000168 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 52 ) )
                 	__POINTW1FN _0x0,52
000169 93fa      	ST   -Y,R31
00016a 93ea      	ST   -Y,R30
00016b e080      	LDI  R24,0
00016c d21b      	RCALL _lcd_printf
00016d 9622      	ADIW R28,2
                 ; 0000 00B2 SET_BIT(PORTD,4);
00016e 9a94      	SBI  0x12,4
                 ; 0000 00B3 }
                 ; 0000 00B4 }
                 _0x27:
                 _0x26:
                 ; 0000 00B5 }
                 _0x24:
                 _0x23:
                 _0x1C:
00016f 9508      	RET
                 ; .FEND
                 ;unsigned int ADC_Read(unsigned char ch)
                 ; 0000 00B8 {
                 _ADC_Read:
                 ; .FSTART _ADC_Read
                 ; 0000 00B9 ADMUX  = (ADMUX & 0b11100000) | ch;  //Select channel -> First: clear the previously set channel, then set the new channel
000170 931a      	ST   -Y,R17
000171 2f1a      	MOV  R17,R26
                 ;	ch -> R17
000172 b1e7      	IN   R30,0x7
000173 7ee0      	ANDI R30,LOW(0xE0)
000174 2be1      	OR   R30,R17
000175 b9e7      	OUT  0x7,R30
                 ; 0000 00BA ADCSRA.6 = 1;         //Start conversion
000176 9a36      	SBI  0x6,6
                 ; 0000 00BB while(ADCSRA.6 == 1); // Wait till the conversion ends
                 _0x2A:
000177 9936      	SBIC 0x6,6
000178 cffe      	RJMP _0x2A
                 ; 0000 00BC return ADCH;
000179 b1e5      	IN   R30,0x5
00017a e0f0      	LDI  R31,0
00017b c0d4      	RJMP _0x2080001
                 ; 0000 00BD 
                 ; 0000 00BE }
                 ; .FEND
                 ;int Sensor_Val()
                 ; 0000 00C1 {
                 _Sensor_Val:
                 ; .FSTART _Sensor_Val
                 ; 0000 00C2 int temp = 0;
                 ; 0000 00C3 temp = (ADC_Read(ADC_Channel) * 50) / 255; // temp ranges from 0 to 50 ^c
00017c 931a      	ST   -Y,R17
00017d 930a      	ST   -Y,R16
                 ;	temp -> R16,R17
                +
00017e e000     +LDI R16 , LOW ( 0 )
00017f e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000180 e0a0      	LDI  R26,LOW(0)
000181 dfee      	RCALL _ADC_Read
000182 e3a2      	LDI  R26,LOW(50)
000183 e0b0      	LDI  R27,HIGH(50)
000184 d290      	RCALL __MULW12U
000185 01df      	MOVW R26,R30
000186 efef      	LDI  R30,LOW(255)
000187 e0f0      	LDI  R31,HIGH(255)
000188 d294      	RCALL __DIVW21U
000189 018f      	MOVW R16,R30
                 ; 0000 00C4 return temp;
                 _0x2080002:
00018a 9109      	LD   R16,Y+
00018b 9119      	LD   R17,Y+
00018c 9508      	RET
                 ; 0000 00C5 }
                 ; .FEND
                 ;interrupt[3] void ext_int1(void)
                 ; 0000 00CA {
                 _ext_int1:
                 ; .FSTART _ext_int1
00018d 93ea      	ST   -Y,R30
00018e b7ef      	IN   R30,SREG
                 ; 0000 00CB count++;
00018f 9493      	INC  R9
                 ; 0000 00CC }
000190 c005      	RJMP _0x35
                 ; .FEND
                 ;interrupt[19] void ext_int2(void)
                 ; 0000 00CF {
                 _ext_int2:
                 ; .FSTART _ext_int2
000191 93ea      	ST   -Y,R30
000192 b7ef      	IN   R30,SREG
                 ; 0000 00D0 if(count != 0)//for not get negative value
000193 2099      	TST  R9
000194 f009      	BREQ _0x2D
                 ; 0000 00D1 count--;
000195 949a      	DEC  R9
                 ; 0000 00D2 }
                 _0x2D:
                 _0x35:
000196 bfef      	OUT  SREG,R30
000197 91e9      	LD   R30,Y+
000198 9518      	RETI
                 ; .FEND
                 ;interrupt [5] void T2_OV (void)
                 ; 0000 00D5 {
                 _T2_OV:
                 ; .FSTART _T2_OV
000199 920a      	ST   -Y,R0
00019a 921a      	ST   -Y,R1
00019b 92fa      	ST   -Y,R15
00019c 936a      	ST   -Y,R22
00019d 937a      	ST   -Y,R23
00019e 938a      	ST   -Y,R24
00019f 939a      	ST   -Y,R25
0001a0 93aa      	ST   -Y,R26
0001a1 93ba      	ST   -Y,R27
0001a2 93ea      	ST   -Y,R30
0001a3 93fa      	ST   -Y,R31
0001a4 b7ef      	IN   R30,SREG
0001a5 93ea      	ST   -Y,R30
                 ; 0000 00D6 
                 ; 0000 00D7 if ((secs % 5) == 0 ) // every 5 sec check the temperature value
0001a6 2da5      	MOV  R26,R5
0001a7 27bb      	CLR  R27
0001a8 e0e5      	LDI  R30,LOW(5)
0001a9 e0f0      	LDI  R31,HIGH(5)
0001aa d285      	RCALL __MODW21
0001ab 9730      	SBIW R30,0
0001ac f411      	BRNE _0x2E
                 ; 0000 00D8 T = Sensor_Val();
0001ad dfce      	RCALL _Sensor_Val
0001ae 2e8e      	MOV  R8,R30
                 ; 0000 00D9 
                 ; 0000 00DA secs++;
                 _0x2E:
0001af 9453      	INC  R5
                 ; 0000 00DB 
                 ; 0000 00DC if (secs == 60)
0001b0 e3ec      	LDI  R30,LOW(60)
0001b1 15e5      	CP   R30,R5
0001b2 f411      	BRNE _0x2F
                 ; 0000 00DD {
                 ; 0000 00DE secs = 0;
0001b3 2455      	CLR  R5
                 ; 0000 00DF mins++;
0001b4 9443      	INC  R4
                 ; 0000 00E0 }
                 ; 0000 00E1 if (mins == 60)
                 _0x2F:
0001b5 e3ec      	LDI  R30,LOW(60)
0001b6 15e4      	CP   R30,R4
0001b7 f411      	BRNE _0x30
                 ; 0000 00E2 {
                 ; 0000 00E3 mins = 0;
0001b8 2444      	CLR  R4
                 ; 0000 00E4 hours++;
0001b9 9473      	INC  R7
                 ; 0000 00E5 
                 ; 0000 00E6 }
                 ; 0000 00E7 
                 ; 0000 00E8 }
                 _0x30:
0001ba 91e9      	LD   R30,Y+
0001bb bfef      	OUT  SREG,R30
0001bc 91f9      	LD   R31,Y+
0001bd 91e9      	LD   R30,Y+
0001be 91b9      	LD   R27,Y+
0001bf 91a9      	LD   R26,Y+
0001c0 9199      	LD   R25,Y+
0001c1 9189      	LD   R24,Y+
0001c2 9179      	LD   R23,Y+
0001c3 9169      	LD   R22,Y+
0001c4 90f9      	LD   R15,Y+
0001c5 9019      	LD   R1,Y+
0001c6 9009      	LD   R0,Y+
0001c7 9518      	RETI
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0001c8 931a      	ST   -Y,R17
0001c9 2f1a      	MOV  R17,R26
0001ca ff14      	SBRS R17,4
0001cb c002      	RJMP _0x2000004
0001cc 9aab      	SBI  0x15,3
0001cd c001      	RJMP _0x2000005
                 _0x2000004:
0001ce 98ab      	CBI  0x15,3
                 _0x2000005:
0001cf ff15      	SBRS R17,5
0001d0 c002      	RJMP _0x2000006
0001d1 9aac      	SBI  0x15,4
0001d2 c001      	RJMP _0x2000007
                 _0x2000006:
0001d3 98ac      	CBI  0x15,4
                 _0x2000007:
0001d4 ff16      	SBRS R17,6
0001d5 c002      	RJMP _0x2000008
0001d6 9aad      	SBI  0x15,5
0001d7 c001      	RJMP _0x2000009
                 _0x2000008:
0001d8 98ad      	CBI  0x15,5
                 _0x2000009:
0001d9 ff17      	SBRS R17,7
0001da c002      	RJMP _0x200000A
0001db 9a90      	SBI  0x12,0
0001dc c001      	RJMP _0x200000B
                 _0x200000A:
0001dd 9890      	CBI  0x12,0
                 _0x200000B:
                +
0001de e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001df 958a     +DEC R24
0001e0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001e1 9aaa      	SBI  0x15,2
                +
0001e2 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001e3 958a     +DEC R24
0001e4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001e5 98aa      	CBI  0x15,2
                +
0001e6 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001e7 958a     +DEC R24
0001e8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001e9 c066      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001ea 93aa      	ST   -Y,R26
0001eb 81a8      	LD   R26,Y
0001ec dfdb      	RCALL __lcd_write_nibble_G100
0001ed 81e8          ld    r30,y
0001ee 95e2          swap  r30
0001ef 83e8          st    y,r30
0001f0 81a8      	LD   R26,Y
0001f1 dfd6      	RCALL __lcd_write_nibble_G100
                +
0001f2 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0001f3 958a     +DEC R24
0001f4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0001f5 9621      	ADIW R28,1
0001f6 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001f7 931a      	ST   -Y,R17
0001f8 930a      	ST   -Y,R16
0001f9 2f1a      	MOV  R17,R26
0001fa 810a      	LDD  R16,Y+2
0001fb 2fe1      	MOV  R30,R17
0001fc e0f0      	LDI  R31,0
0001fd 5ae0      	SUBI R30,LOW(-__base_y_G100)
0001fe 4ffe      	SBCI R31,HIGH(-__base_y_G100)
0001ff 81e0      	LD   R30,Z
000200 0fe0      	ADD  R30,R16
000201 2fae      	MOV  R26,R30
000202 dfe7      	RCALL __lcd_write_data
000203 2eb0      	MOV  R11,R16
000204 2ea1      	MOV  R10,R17
000205 8119      	LDD  R17,Y+1
000206 8108      	LDD  R16,Y+0
000207 9623      	ADIW R28,3
000208 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000209 e0a2      	LDI  R26,LOW(2)
00020a d1d0      	RCALL SUBOPT_0x3
00020b e0ac      	LDI  R26,LOW(12)
00020c dfdd      	RCALL __lcd_write_data
00020d e0a1      	LDI  R26,LOW(1)
00020e d1cc      	RCALL SUBOPT_0x3
00020f e0e0      	LDI  R30,LOW(0)
000210 2eae      	MOV  R10,R30
000211 2ebe      	MOV  R11,R30
000212 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000213 931a      	ST   -Y,R17
000214 2f1a      	MOV  R17,R26
000215 301a      	CPI  R17,10
000216 f011      	BREQ _0x2000011
000217 14bd      	CP   R11,R13
000218 f038      	BRLO _0x2000010
                 _0x2000011:
000219 e0e0      	LDI  R30,LOW(0)
00021a 93ea      	ST   -Y,R30
00021b 94a3      	INC  R10
00021c 2daa      	MOV  R26,R10
00021d dfd9      	RCALL _lcd_gotoxy
00021e 301a      	CPI  R17,10
00021f f181      	BREQ _0x2080001
                 _0x2000010:
000220 94b3      	INC  R11
000221 9aa8      	SBI  0x15,0
000222 2fa1      	MOV  R26,R17
000223 dfc6      	RCALL __lcd_write_data
000224 98a8      	CBI  0x15,0
000225 c02a      	RJMP _0x2080001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000226 931a      	ST   -Y,R17
000227 2f1a      	MOV  R17,R26
000228 9aa3      	SBI  0x14,3
000229 9aa4      	SBI  0x14,4
00022a 9aa5      	SBI  0x14,5
00022b 9a88      	SBI  0x11,0
00022c 9aa2      	SBI  0x14,2
00022d 9aa0      	SBI  0x14,0
00022e 9aa1      	SBI  0x14,1
00022f 98aa      	CBI  0x15,2
000230 98a8      	CBI  0x15,0
000231 98a9      	CBI  0x15,1
000232 2ed1      	MOV  R13,R17
000233 2fe1      	MOV  R30,R17
000234 58e0      	SUBI R30,-LOW(128)
                +
000235 93e0 0162+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000237 2fe1      	MOV  R30,R17
000238 54e0      	SUBI R30,-LOW(192)
                +
000239 93e0 0163+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00023b e1a4      	LDI  R26,LOW(20)
00023c e0b0      	LDI  R27,0
00023d d209      	RCALL _delay_ms
00023e d1a0      	RCALL SUBOPT_0x4
00023f d19f      	RCALL SUBOPT_0x4
000240 d19e      	RCALL SUBOPT_0x4
000241 e2a0      	LDI  R26,LOW(32)
000242 df85      	RCALL __lcd_write_nibble_G100
                +
000243 ec88     +LDI R24 , LOW ( 200 )
000244 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000245 9701     +SBIW R24 , 1
000246 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000247 e2a8      	LDI  R26,LOW(40)
000248 dfa1      	RCALL __lcd_write_data
000249 e0a4      	LDI  R26,LOW(4)
00024a df9f      	RCALL __lcd_write_data
00024b e8a5      	LDI  R26,LOW(133)
00024c df9d      	RCALL __lcd_write_data
00024d e0a6      	LDI  R26,LOW(6)
00024e df9b      	RCALL __lcd_write_data
00024f dfb9      	RCALL _lcd_clear
                 _0x2080001:
000250 9119      	LD   R17,Y+
000251 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 __print_G101:
                 ; .FSTART __print_G101
000252 93ba      	ST   -Y,R27
000253 93aa      	ST   -Y,R26
000254 9726      	SBIW R28,6
000255 d1ad      	RCALL __SAVELOCR6
000256 e010      	LDI  R17,0
000257 85ac      	LDD  R26,Y+12
000258 85bd      	LDD  R27,Y+12+1
000259 e0e0      	LDI  R30,LOW(0)
00025a e0f0      	LDI  R31,HIGH(0)
00025b 93ed      	ST   X+,R30
00025c 93fc      	ST   X,R31
                 _0x2020016:
00025d 89ea      	LDD  R30,Y+18
00025e 89fb      	LDD  R31,Y+18+1
00025f 9631      	ADIW R30,1
000260 8bea      	STD  Y+18,R30
000261 8bfb      	STD  Y+18+1,R31
000262 9731      	SBIW R30,1
000263 91e4      	LPM  R30,Z
000264 2f2e      	MOV  R18,R30
000265 30e0      	CPI  R30,0
000266 f409      	BRNE PC+2
000267 c10b      	RJMP _0x2020018
000268 2fe1      	MOV  R30,R17
000269 30e0      	CPI  R30,0
00026a f431      	BRNE _0x202001C
00026b 3225      	CPI  R18,37
00026c f411      	BRNE _0x202001D
00026d e011      	LDI  R17,LOW(1)
00026e c001      	RJMP _0x202001E
                 _0x202001D:
00026f d176      	RCALL SUBOPT_0x5
                 _0x202001E:
000270 c101      	RJMP _0x202001B
                 _0x202001C:
000271 30e1      	CPI  R30,LOW(0x1)
000272 f4a1      	BRNE _0x202001F
000273 3225      	CPI  R18,37
000274 f411      	BRNE _0x2020020
000275 d170      	RCALL SUBOPT_0x5
000276 c0fa      	RJMP _0x20200CC
                 _0x2020020:
000277 e012      	LDI  R17,LOW(2)
000278 e040      	LDI  R20,LOW(0)
000279 e000      	LDI  R16,LOW(0)
00027a 322d      	CPI  R18,45
00027b f411      	BRNE _0x2020021
00027c e001      	LDI  R16,LOW(1)
00027d c0f4      	RJMP _0x202001B
                 _0x2020021:
00027e 322b      	CPI  R18,43
00027f f411      	BRNE _0x2020022
000280 e24b      	LDI  R20,LOW(43)
000281 c0f0      	RJMP _0x202001B
                 _0x2020022:
000282 3220      	CPI  R18,32
000283 f411      	BRNE _0x2020023
000284 e240      	LDI  R20,LOW(32)
000285 c0ec      	RJMP _0x202001B
                 _0x2020023:
000286 c002      	RJMP _0x2020024
                 _0x202001F:
000287 30e2      	CPI  R30,LOW(0x2)
000288 f439      	BRNE _0x2020025
                 _0x2020024:
000289 e050      	LDI  R21,LOW(0)
00028a e013      	LDI  R17,LOW(3)
00028b 3320      	CPI  R18,48
00028c f411      	BRNE _0x2020026
00028d 6800      	ORI  R16,LOW(128)
00028e c0e3      	RJMP _0x202001B
                 _0x2020026:
00028f c003      	RJMP _0x2020027
                 _0x2020025:
000290 30e3      	CPI  R30,LOW(0x3)
000291 f009      	BREQ PC+2
000292 c0df      	RJMP _0x202001B
                 _0x2020027:
000293 3320      	CPI  R18,48
000294 f010      	BRLO _0x202002A
000295 332a      	CPI  R18,58
000296 f008      	BRLO _0x202002B
                 _0x202002A:
000297 c007      	RJMP _0x2020029
                 _0x202002B:
000298 e0aa      	LDI  R26,LOW(10)
000299 9f5a      	MUL  R21,R26
00029a 2d50      	MOV  R21,R0
00029b 2fe2      	MOV  R30,R18
00029c 53e0      	SUBI R30,LOW(48)
00029d 0f5e      	ADD  R21,R30
00029e c0d3      	RJMP _0x202001B
                 _0x2020029:
00029f 2fe2      	MOV  R30,R18
0002a0 36e3      	CPI  R30,LOW(0x63)
0002a1 f439      	BRNE _0x202002F
0002a2 d14a      	RCALL SUBOPT_0x6
0002a3 89e8      	LDD  R30,Y+16
0002a4 89f9      	LDD  R31,Y+16+1
0002a5 81a4      	LDD  R26,Z+4
0002a6 93aa      	ST   -Y,R26
0002a7 d14b      	RCALL SUBOPT_0x7
0002a8 c0c8      	RJMP _0x2020030
                 _0x202002F:
0002a9 37e3      	CPI  R30,LOW(0x73)
0002aa f429      	BRNE _0x2020032
0002ab d141      	RCALL SUBOPT_0x6
0002ac d14c      	RCALL SUBOPT_0x8
0002ad d101      	RCALL _strlen
0002ae 2f1e      	MOV  R17,R30
0002af c007      	RJMP _0x2020033
                 _0x2020032:
0002b0 37e0      	CPI  R30,LOW(0x70)
0002b1 f449      	BRNE _0x2020035
0002b2 d13a      	RCALL SUBOPT_0x6
0002b3 d145      	RCALL SUBOPT_0x8
0002b4 d106      	RCALL _strlenf
0002b5 2f1e      	MOV  R17,R30
0002b6 6008      	ORI  R16,LOW(8)
                 _0x2020033:
0002b7 6002      	ORI  R16,LOW(2)
0002b8 770f      	ANDI R16,LOW(127)
0002b9 e030      	LDI  R19,LOW(0)
0002ba c03a      	RJMP _0x2020036
                 _0x2020035:
0002bb 36e4      	CPI  R30,LOW(0x64)
0002bc f011      	BREQ _0x2020039
0002bd 36e9      	CPI  R30,LOW(0x69)
0002be f411      	BRNE _0x202003A
                 _0x2020039:
0002bf 6004      	ORI  R16,LOW(4)
0002c0 c002      	RJMP _0x202003B
                 _0x202003A:
0002c1 37e5      	CPI  R30,LOW(0x75)
0002c2 f431      	BRNE _0x202003C
                 _0x202003B:
0002c3 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
0002c4 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
0002c5 83ee      	STD  Y+6,R30
0002c6 83ff      	STD  Y+6+1,R31
0002c7 e015      	LDI  R17,LOW(5)
0002c8 c00c      	RJMP _0x202003D
                 _0x202003C:
0002c9 35e8      	CPI  R30,LOW(0x58)
0002ca f411      	BRNE _0x202003F
0002cb 6008      	ORI  R16,LOW(8)
0002cc c003      	RJMP _0x2020040
                 _0x202003F:
0002cd 37e8      	CPI  R30,LOW(0x78)
0002ce f009      	BREQ PC+2
0002cf c0a1      	RJMP _0x2020071
                 _0x2020040:
0002d0 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
0002d1 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
0002d2 83ee      	STD  Y+6,R30
0002d3 83ff      	STD  Y+6+1,R31
0002d4 e014      	LDI  R17,LOW(4)
                 _0x202003D:
0002d5 ff02      	SBRS R16,2
0002d6 c015      	RJMP _0x2020042
0002d7 d115      	RCALL SUBOPT_0x6
0002d8 89a8      	LDD  R26,Y+16
0002d9 89b9      	LDD  R27,Y+16+1
0002da 9614      	ADIW R26,4
0002db 91ed      	LD   R30,X+
0002dc 91fd      	LD   R31,X+
0002dd 87ea      	STD  Y+10,R30
0002de 87fb      	STD  Y+10+1,R31
0002df 85ab      	LDD  R26,Y+11
0002e0 23aa      	TST  R26
0002e1 f422      	BRPL _0x2020043
0002e2 d12e      	RCALL __ANEGW1
0002e3 87ea      	STD  Y+10,R30
0002e4 87fb      	STD  Y+10+1,R31
0002e5 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
0002e6 3040      	CPI  R20,0
0002e7 f011      	BREQ _0x2020044
0002e8 5f1f      	SUBI R17,-LOW(1)
0002e9 c001      	RJMP _0x2020045
                 _0x2020044:
0002ea 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
0002eb c009      	RJMP _0x2020046
                 _0x2020042:
0002ec d100      	RCALL SUBOPT_0x6
0002ed 89a8      	LDD  R26,Y+16
0002ee 89b9      	LDD  R27,Y+16+1
0002ef 9614      	ADIW R26,4
                +
0002f0 91ed     +LD R30 , X +
0002f1 91fc     +LD R31 , X
0002f2 9711     +SBIW R26 , 1
                 	__GETW1P
0002f3 87ea      	STD  Y+10,R30
0002f4 87fb      	STD  Y+10+1,R31
                 _0x2020046:
                 _0x2020036:
0002f5 fd00      	SBRC R16,0
0002f6 c010      	RJMP _0x2020047
                 _0x2020048:
0002f7 1715      	CP   R17,R21
0002f8 f470      	BRSH _0x202004A
0002f9 ff07      	SBRS R16,7
0002fa c008      	RJMP _0x202004B
0002fb ff02      	SBRS R16,2
0002fc c004      	RJMP _0x202004C
0002fd 7f0b      	ANDI R16,LOW(251)
0002fe 2f24      	MOV  R18,R20
0002ff 5011      	SUBI R17,LOW(1)
000300 c001      	RJMP _0x202004D
                 _0x202004C:
000301 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000302 c001      	RJMP _0x202004E
                 _0x202004B:
000303 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000304 d0e1      	RCALL SUBOPT_0x5
000305 5051      	SUBI R21,LOW(1)
000306 cff0      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000307 2f31      	MOV  R19,R17
000308 ff01      	SBRS R16,1
000309 c016      	RJMP _0x202004F
                 _0x2020050:
00030a 3030      	CPI  R19,0
00030b f099      	BREQ _0x2020052
00030c ff03      	SBRS R16,3
00030d c006      	RJMP _0x2020053
00030e 81ee      	LDD  R30,Y+6
00030f 81ff      	LDD  R31,Y+6+1
000310 9125      	LPM  R18,Z+
000311 83ee      	STD  Y+6,R30
000312 83ff      	STD  Y+6+1,R31
000313 c005      	RJMP _0x2020054
                 _0x2020053:
000314 81ae      	LDD  R26,Y+6
000315 81bf      	LDD  R27,Y+6+1
000316 912d      	LD   R18,X+
000317 83ae      	STD  Y+6,R26
000318 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000319 d0cc      	RCALL SUBOPT_0x5
00031a 3050      	CPI  R21,0
00031b f009      	BREQ _0x2020055
00031c 5051      	SUBI R21,LOW(1)
                 _0x2020055:
00031d 5031      	SUBI R19,LOW(1)
00031e cfeb      	RJMP _0x2020050
                 _0x2020052:
00031f c048      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000320 e320      	LDI  R18,LOW(48)
000321 81ee      	LDD  R30,Y+6
000322 81ff      	LDD  R31,Y+6+1
000323 d11a      	RCALL __GETW1PF
000324 87e8      	STD  Y+8,R30
000325 87f9      	STD  Y+8+1,R31
000326 81ee      	LDD  R30,Y+6
000327 81ff      	LDD  R31,Y+6+1
000328 9632      	ADIW R30,2
000329 83ee      	STD  Y+6,R30
00032a 83ff      	STD  Y+6+1,R31
                 _0x202005A:
00032b 85e8      	LDD  R30,Y+8
00032c 85f9      	LDD  R31,Y+8+1
00032d 85aa      	LDD  R26,Y+10
00032e 85bb      	LDD  R27,Y+10+1
00032f 17ae      	CP   R26,R30
000330 07bf      	CPC  R27,R31
000331 f050      	BRLO _0x202005C
000332 5f2f      	SUBI R18,-LOW(1)
000333 85a8      	LDD  R26,Y+8
000334 85b9      	LDD  R27,Y+8+1
000335 85ea      	LDD  R30,Y+10
000336 85fb      	LDD  R31,Y+10+1
000337 1bea      	SUB  R30,R26
000338 0bfb      	SBC  R31,R27
000339 87ea      	STD  Y+10,R30
00033a 87fb      	STD  Y+10+1,R31
00033b cfef      	RJMP _0x202005A
                 _0x202005C:
00033c 332a      	CPI  R18,58
00033d f028      	BRLO _0x202005D
00033e ff03      	SBRS R16,3
00033f c002      	RJMP _0x202005E
000340 5f29      	SUBI R18,-LOW(7)
000341 c001      	RJMP _0x202005F
                 _0x202005E:
000342 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
000343 fd04      	SBRC R16,4
000344 c019      	RJMP _0x2020061
000345 3321      	CPI  R18,49
000346 f420      	BRSH _0x2020063
000347 85a8      	LDD  R26,Y+8
000348 85b9      	LDD  R27,Y+8+1
000349 9711      	SBIW R26,1
00034a f409      	BRNE _0x2020062
                 _0x2020063:
00034b c009      	RJMP _0x20200CD
                 _0x2020062:
00034c 1753      	CP   R21,R19
00034d f010      	BRLO _0x2020067
00034e ff00      	SBRS R16,0
00034f c001      	RJMP _0x2020068
                 _0x2020067:
000350 c011      	RJMP _0x2020066
                 _0x2020068:
000351 e220      	LDI  R18,LOW(32)
000352 ff07      	SBRS R16,7
000353 c00a      	RJMP _0x2020069
000354 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
000355 6100      	ORI  R16,LOW(16)
000356 ff02      	SBRS R16,2
000357 c006      	RJMP _0x202006A
000358 7f0b      	ANDI R16,LOW(251)
000359 934a      	ST   -Y,R20
00035a d098      	RCALL SUBOPT_0x7
00035b 3050      	CPI  R21,0
00035c f009      	BREQ _0x202006B
00035d 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
00035e d087      	RCALL SUBOPT_0x5
00035f 3050      	CPI  R21,0
000360 f009      	BREQ _0x202006C
000361 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
000362 5031      	SUBI R19,LOW(1)
000363 85a8      	LDD  R26,Y+8
000364 85b9      	LDD  R27,Y+8+1
000365 9712      	SBIW R26,2
000366 f008      	BRLO _0x2020059
000367 cfb8      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
000368 ff00      	SBRS R16,0
000369 c007      	RJMP _0x202006D
                 _0x202006E:
00036a 3050      	CPI  R21,0
00036b f029      	BREQ _0x2020070
00036c 5051      	SUBI R21,LOW(1)
00036d e2e0      	LDI  R30,LOW(32)
00036e 93ea      	ST   -Y,R30
00036f d083      	RCALL SUBOPT_0x7
000370 cff9      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
000371 e010      	LDI  R17,LOW(0)
                 _0x202001B:
000372 ceea      	RJMP _0x2020016
                 _0x2020018:
000373 85ac      	LDD  R26,Y+12
000374 85bd      	LDD  R27,Y+12+1
000375 91ed      	LD   R30,X+
000376 91fd      	LD   R31,X+
000377 d092      	RCALL __LOADLOCR6
000378 9664      	ADIW R28,20
000379 9508      	RET
                 ; .FEND
                 _put_lcd_G101:
                 ; .FSTART _put_lcd_G101
00037a d08a      	RCALL __SAVELOCR4
00037b 018d      	MOVW R16,R26
00037c 813c      	LDD  R19,Y+4
00037d 2fa3      	MOV  R26,R19
00037e de94      	RCALL _lcd_putchar
00037f 01d8      	MOVW R26,R16
000380 91ed      	LD   R30,X+
000381 91fd      	LD   R31,X+
000382 9631      	ADIW R30,1
000383 93fe      	ST   -X,R31
000384 93ee      	ST   -X,R30
000385 d086      	RCALL __LOADLOCR4
000386 9625      	ADIW R28,5
000387 9508      	RET
                 ; .FEND
                 _lcd_printf:
                 ; .FSTART _lcd_printf
000388 92ff      	PUSH R15
000389 2ef8      	MOV  R15,R24
00038a 9726      	SBIW R28,6
00038b 931a      	ST   -Y,R17
00038c 930a      	ST   -Y,R16
00038d 01de      	MOVW R26,R28
00038e 9614      	ADIW R26,4
                +
00038f 2400     +CLR R0
000390 0daf     +ADD R26 , R15
000391 1db0     +ADC R27 , R0
                 	__ADDW2R15
000392 018d      	MOVW R16,R26
000393 e0e0      	LDI  R30,LOW(0)
000394 83ec      	STD  Y+4,R30
000395 83ed      	STD  Y+4+1,R30
000396 83ee      	STD  Y+6,R30
000397 83ef      	STD  Y+6+1,R30
000398 01de      	MOVW R26,R28
000399 9618      	ADIW R26,8
                +
00039a 2400     +CLR R0
00039b 0daf     +ADD R26 , R15
00039c 1db0     +ADC R27 , R0
                 	__ADDW2R15
00039d 91ed      	LD   R30,X+
00039e 91fd      	LD   R31,X+
00039f 93fa      	ST   -Y,R31
0003a0 93ea      	ST   -Y,R30
0003a1 931a      	ST   -Y,R17
0003a2 930a      	ST   -Y,R16
0003a3 e7ea      	LDI  R30,LOW(_put_lcd_G101)
0003a4 e0f3      	LDI  R31,HIGH(_put_lcd_G101)
0003a5 93fa      	ST   -Y,R31
0003a6 93ea      	ST   -Y,R30
0003a7 01de      	MOVW R26,R28
0003a8 9618      	ADIW R26,8
0003a9 dea8      	RCALL __print_G101
0003aa 8119      	LDD  R17,Y+1
0003ab 8108      	LDD  R16,Y+0
0003ac 9628      	ADIW R28,8
0003ad 90ff      	POP  R15
0003ae 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0003af 93ba      	ST   -Y,R27
0003b0 93aa      	ST   -Y,R26
0003b1 91a9          ld   r26,y+
0003b2 91b9          ld   r27,y+
0003b3 27ee          clr  r30
0003b4 27ff          clr  r31
                 strlen0:
0003b5 916d          ld   r22,x+
0003b6 2366          tst  r22
0003b7 f011          breq strlen1
0003b8 9631          adiw r30,1
0003b9 cffb          rjmp strlen0
                 strlen1:
0003ba 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0003bb 93ba      	ST   -Y,R27
0003bc 93aa      	ST   -Y,R26
0003bd 27aa          clr  r26
0003be 27bb          clr  r27
0003bf 91e9          ld   r30,y+
0003c0 91f9          ld   r31,y+
                 strlenf0:
0003c1 9005      	lpm  r0,z+
0003c2 2000          tst  r0
0003c3 f011          breq strlenf1
0003c4 9611          adiw r26,1
0003c5 cffb          rjmp strlenf0
                 strlenf1:
0003c6 01fd          movw r30,r26
0003c7 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0003c8 e0e3      	LDI  R30,LOW(3)
0003c9 93ea      	ST   -Y,R30
0003ca e0a0      	LDI  R26,LOW(0)
0003cb ce2b      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1:
0003cc 27ff      	CLR  R31
0003cd 2766      	CLR  R22
0003ce 2777      	CLR  R23
0003cf d072      	RCALL __PUTPARD1
0003d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0x2:
0003d1 e0ea      	LDI  R30,LOW(10)
0003d2 93ea      	ST   -Y,R30
0003d3 e0a1      	LDI  R26,LOW(1)
0003d4 de22      	RCALL _lcd_gotoxy
                +
0003d5 e9e9     +LDI R30 , LOW ( 2 * _0x0 + ( 45 ) )
0003d6 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 45 ) )
                 	__POINTW1FN _0x0,45
0003d7 93fa      	ST   -Y,R31
0003d8 93ea      	ST   -Y,R30
0003d9 2de9      	MOV  R30,R9
0003da cff1      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0003db de0e      	RCALL __lcd_write_data
0003dc e0a3      	LDI  R26,LOW(3)
0003dd e0b0      	LDI  R27,0
0003de c068      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x4:
0003df e3a0      	LDI  R26,LOW(48)
0003e0 dde7      	RCALL __lcd_write_nibble_G100
                +
0003e1 ec88     +LDI R24 , LOW ( 200 )
0003e2 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0003e3 9701     +SBIW R24 , 1
0003e4 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0003e5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x5:
0003e6 932a      	ST   -Y,R18
0003e7 85ad      	LDD  R26,Y+13
0003e8 85be      	LDD  R27,Y+13+1
0003e9 85ef      	LDD  R30,Y+15
0003ea 89f8      	LDD  R31,Y+15+1
0003eb 9509      	ICALL
0003ec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x6:
0003ed 89e8      	LDD  R30,Y+16
0003ee 89f9      	LDD  R31,Y+16+1
0003ef 9734      	SBIW R30,4
0003f0 8be8      	STD  Y+16,R30
0003f1 8bf9      	STD  Y+16+1,R31
0003f2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x7:
0003f3 85ad      	LDD  R26,Y+13
0003f4 85be      	LDD  R27,Y+13+1
0003f5 85ef      	LDD  R30,Y+15
0003f6 89f8      	LDD  R31,Y+15+1
0003f7 9509      	ICALL
0003f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x8:
0003f9 89a8      	LDD  R26,Y+16
0003fa 89b9      	LDD  R27,Y+16+1
0003fb 9614      	ADIW R26,4
0003fc 91ed      	LD   R30,X+
0003fd 91fd      	LD   R31,X+
0003fe 83ee      	STD  Y+6,R30
0003ff 83ff      	STD  Y+6+1,R31
000400 81ae      	LDD  R26,Y+6
000401 81bf      	LDD  R27,Y+6+1
000402 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000403 935a      	ST   -Y,R21
                 __SAVELOCR5:
000404 934a      	ST   -Y,R20
                 __SAVELOCR4:
000405 933a      	ST   -Y,R19
                 __SAVELOCR3:
000406 932a      	ST   -Y,R18
                 __SAVELOCR2:
000407 931a      	ST   -Y,R17
000408 930a      	ST   -Y,R16
000409 9508      	RET
                 
                 __LOADLOCR6:
00040a 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00040b 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00040c 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00040d 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00040e 8119      	LDD  R17,Y+1
00040f 8108      	LD   R16,Y
000410 9508      	RET
                 
                 __ANEGW1:
000411 95f1      	NEG  R31
000412 95e1      	NEG  R30
000413 40f0      	SBCI R31,0
000414 9508      	RET
                 
                 __MULW12U:
000415 9ffa      	MUL  R31,R26
000416 2df0      	MOV  R31,R0
000417 9feb      	MUL  R30,R27
000418 0df0      	ADD  R31,R0
000419 9fea      	MUL  R30,R26
00041a 2de0      	MOV  R30,R0
00041b 0df1      	ADD  R31,R1
00041c 9508      	RET
                 
                 __DIVW21U:
00041d 2400      	CLR  R0
00041e 2411      	CLR  R1
00041f e190      	LDI  R25,16
                 __DIVW21U1:
000420 0faa      	LSL  R26
000421 1fbb      	ROL  R27
000422 1c00      	ROL  R0
000423 1c11      	ROL  R1
000424 1a0e      	SUB  R0,R30
000425 0a1f      	SBC  R1,R31
000426 f418      	BRCC __DIVW21U2
000427 0e0e      	ADD  R0,R30
000428 1e1f      	ADC  R1,R31
000429 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00042a 60a1      	SBR  R26,1
                 __DIVW21U3:
00042b 959a      	DEC  R25
00042c f799      	BRNE __DIVW21U1
00042d 01fd      	MOVW R30,R26
00042e 01d0      	MOVW R26,R0
00042f 9508      	RET
                 
                 __MODW21:
000430 94e8      	CLT
000431 ffb7      	SBRS R27,7
000432 c004      	RJMP __MODW211
000433 95b1      	NEG  R27
000434 95a1      	NEG  R26
000435 40b0      	SBCI R27,0
000436 9468      	SET
                 __MODW211:
000437 fdf7      	SBRC R31,7
000438 dfd8      	RCALL __ANEGW1
000439 dfe3      	RCALL __DIVW21U
00043a 01fd      	MOVW R30,R26
00043b f40e      	BRTC __MODW212
00043c dfd4      	RCALL __ANEGW1
                 __MODW212:
00043d 9508      	RET
                 
                 __GETW1PF:
00043e 9005      	LPM  R0,Z+
00043f 91f4      	LPM  R31,Z
000440 2de0      	MOV  R30,R0
000441 9508      	RET
                 
                 __PUTPARD1:
000442 937a      	ST   -Y,R23
000443 936a      	ST   -Y,R22
000444 93fa      	ST   -Y,R31
000445 93ea      	ST   -Y,R30
000446 9508      	RET
                 
                 _delay_ms:
000447 9610      	adiw r26,0
000448 f039      	breq __delay_ms1
                 __delay_ms0:
000449 95a8      	wdr
                +
00044a ed80     +LDI R24 , LOW ( 0x7D0 )
00044b e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00044c 9701     +SBIW R24 , 1
00044d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00044e 9711      	sbiw r26,1
00044f f7c9      	brne __delay_ms0
                 __delay_ms1:
000450 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  23 r1 :   8 r2 :   0 r3 :   0 r4 :   4 r5 :   5 r6 :   2 r7 :   5 
r8 :   2 r9 :  12 r10:   4 r11:   4 r12:   0 r13:   2 r14:   0 r15:   7 
r16:  53 r17:  57 r18:  27 r19:  10 r20:   9 r21:  17 r22:  15 r23:   6 
r24:  30 r25:   9 r26:  96 r27:  38 r28:  17 r29:   1 r30: 236 r31:  74 
x  :  21 y  : 181 z  :  14 
Registers used: 31 out of 35 (88.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   8 
adiw  :  23 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  16 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  10 
brlt  :   8 brmi  :   0 brne  :  33 brpl  :   1 brsh  :   8 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   1 bst   :   0 call  :   0 
cbi   :  26 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  20 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :  15 cpc   :  10 cpi   :  40 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :  12 inc   :   6 jmp   :  22 ld    :  39 ldd   :  59 ldi   : 130 
lds   :   0 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  42 movw  :  17 
mul   :   4 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :  12 out   :  19 pop   :   1 push  :   1 rcall :  79 ret   :  28 
reti  :   2 rjmp  :  85 rol   :   3 ror   :   0 sbc   :   3 sbci  :   3 
sbi   :  35 sbic  :   1 sbis  :   0 sbiw  :  15 sbr   :   1 sbrc  :   3 
sbrs  :  15 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  76 std   :  30 sts   :   2 sub   :   2 subi  :  17 swap  :   1 
tst   :   5 wdr   :   1 
Instructions used: 62 out of 116 (53.4%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0008a2   2112     98   2210   16384  13.5%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
